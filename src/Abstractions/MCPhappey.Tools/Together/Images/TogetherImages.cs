using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using MCPhappey.Common.Extensions;
using MCPhappey.Core.Extensions;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.KernelMemory.Pipeline;
using ModelContextProtocol.Protocol;
using ModelContextProtocol.Server;

namespace MCPhappey.Tools.Together.Images;

public static class TogetherImages
{
    [Description("List all Together AI image models.")]
    [McpServerTool(Title = "List Together AI Image Models", Name = "together_images_list_models", ReadOnly = true)]
    public static async Task<CallToolResult?> TogetherImages_ListModels(
     IServiceProvider serviceProvider,
     RequestContext<CallToolRequestParams> requestContext,
     CancellationToken cancellationToken = default)
      => await requestContext.WithExceptionCheck(async ()
      => await requestContext.WithStructuredContent(async () =>
    {
        var settings = serviceProvider.GetRequiredService<TogetherSettings>();
        var clientFactory = serviceProvider.GetRequiredService<IHttpClientFactory>();

        using var client = clientFactory.CreateClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", settings.ApiKey);

        using var resp = await client.GetAsync("https://api.together.xyz/v1/models", cancellationToken);
        var json = await resp.Content.ReadAsStringAsync(cancellationToken);

        if (!resp.IsSuccessStatusCode)
            throw new Exception($"{resp.StatusCode}: {json}");

        using var doc = JsonDocument.Parse(json);
        var root = doc.RootElement;

        // ✅ Works for both `{ "data": [...] }` and `[ {...}, {...} ]`
        var modelsArray = root.ValueKind == JsonValueKind.Array
            ? root.EnumerateArray()
            : root.GetProperty("data").EnumerateArray();

        var imageModels = modelsArray
            .Where(e => e.TryGetProperty("type", out var t) && t.GetString() == "image")
            .Select(e => JsonNode.Parse(e.GetRawText())!)
            .ToArray();

        // ✅ Always return an object, not a naked array
        return new JsonObject
        {
            ["models"] = new JsonArray(imageModels)
        };
    }));

    [Description("Generate an image using Together AI image models.")]
    [McpServerTool(Title = "Generate image with Together AI",
        Name = "together_images_create", Destructive = false)]
    public static async Task<CallToolResult?> TogetherImages_Create(
       [Description("Prompt for the image generation.")] string prompt,
       IServiceProvider serviceProvider,
       RequestContext<CallToolRequestParams> requestContext,
       [Description("The Together image model to use, e.g. black-forest-labs/FLUX.1-schnell")] string model,
       [Description("Width of the image."), Range(1024, 1792)] int width = 1024,
       [Description("Height of the image."), Range(1024, 1792)] int height = 1024,
       [Description("Number of generation steps."), Range(1, 12)] int steps = 6,
       [Description("Adjusts the alignment of the generated image with the input prompt. Higher values (e.g., 8-10) make the output more faithful to the prompt, while lower values (e.g., 1-5) encourage more creative freedom."), Range(1, 10)] double guidanceScale = 3.5,
       [Description("Output filename without extension. Defaults to autogenerated name.")] string? filename = null,
       CancellationToken cancellationToken = default)
       => await requestContext.WithExceptionCheck(async () =>
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(prompt);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(model);

        var settings = serviceProvider.GetRequiredService<TogetherSettings>();
        var clientFactory = serviceProvider.GetRequiredService<IHttpClientFactory>();

        // Step 1: Ask user for additional image parameters
        var (typed, notAccepted, _) = await requestContext.Server.TryElicit(
            new TogetherNewImage
            {
                Prompt = prompt,
                Model = model,
                Filename = filename?.ToOutputFileName() ?? requestContext.ToOutputFileName("png"),
                Width = width,
                Height = height,
                Steps = steps,
                GuidanceScale = guidanceScale,
            },
            cancellationToken);

        if (notAccepted != null) return notAccepted;
        if (typed == null) return "User input missing.".ToErrorCallToolResponse();

        // Step 2: Build JSON payload
        var jsonBody = JsonSerializer.Serialize(new
        {
            prompt = typed.Prompt,
            model = typed.Model,
            steps = typed.Steps,
            height = typed.Height,
            width = typed.Width,
            guidance_scale = typed.GuidanceScale,
            negative_prompt = typed.NegativePrompt,
            seed = typed.Seed,
            response_format = "base64",
            output_format = "png"
        });

        using var client = clientFactory.CreateClient();
        using var request = new HttpRequestMessage(HttpMethod.Post, "https://api.together.xyz/v1/images/generations");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", settings.ApiKey);
        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(MimeTypes.Json));
        request.Content = new StringContent(jsonBody, Encoding.UTF8, MimeTypes.Json);

        // Step 3: Send request
        using var resp = await client.SendAsync(request, cancellationToken);
        var jsonResponse = await resp.Content.ReadAsStringAsync(cancellationToken);
        if (!resp.IsSuccessStatusCode)
            throw new Exception($"{resp.StatusCode}: {jsonResponse}");

        using var doc = JsonDocument.Parse(jsonResponse);
        var b64 = doc.RootElement
            .GetProperty("data")[0]
            .GetProperty("b64_json")
            .GetString();

        if (string.IsNullOrWhiteSpace(b64))
            throw new Exception("No image data returned from Together API.");

        var bytes = Convert.FromBase64String(b64);

        // Step 4: Upload to MCP storage
        var uploaded = await requestContext.Server.Upload(
            serviceProvider,
            $"{typed.Filename}.png",
            BinaryData.FromBytes(bytes),
            cancellationToken);

        if (uploaded == null)
            throw new Exception("Upload failed.");

        // Step 5: Return as result + preview image
        return new CallToolResult()
        {
            Content =
            [
                uploaded,
                new ImageContentBlock()
                {
                    Data = Convert.ToBase64String(bytes),
                    MimeType = "image/png"
                }
            ]
        };
    });



    [Description("Please fill in the AI image request details.")]
    public class TogetherNewImage
    {
        [JsonPropertyName("prompt")]
        [Required]
        [Description("The image prompt.")]
        public string Prompt { get; set; } = default!;

        [JsonPropertyName("filename")]
        [Required]
        [Description("The new image file name.")]
        public string Filename { get; set; } = default!;

        [JsonPropertyName("model")]
        [Required]
        [Description("A description of the desired images. Maximum length varies by model.")]
        public string Model { get; set; } = null!;

        [JsonPropertyName("steps")]
        [Required]
        [Description("Number of generation steps.")]
        public int Steps { get; set; } = 20;

        [JsonPropertyName("height")]
        [Required]
        [Description("Height of the image to generate in number of pixels.")]
        public int Height { get; set; } = 1024;

        [JsonPropertyName("width")]
        [Required]
        [Description("Width of the image to generate in number of pixels.")]
        public int Width { get; set; } = 1024;

        [JsonPropertyName("guidance_scale")]
        [Required]
        [Range(1, 10)]
        [Description("Adjusts the alignment of the generated image with the input prompt. Higher values (e.g., 8-10) make the output more faithful to the prompt, while lower values (e.g., 1-5) encourage more creative freedom.")]
        public double GuidanceScale { get; set; } = 3.5;

        [JsonPropertyName("negative_prompt")]
        [Description("The prompt or prompts not to guide the image generation.")]
        public string? NegativePrompt { get; set; } = default!;

        [JsonPropertyName("seed")]
        [Description("Seed used for generation. Can be used to reproduce image generations.")]
        public int? Seed { get; set; }

    }


}



public class TogetherSettings
{
    public string ApiKey { get; set; } = default!;
}
