using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using MCPhappey.Common.Extensions;
using MCPhappey.Core.Extensions;
using MCPhappey.Core.Services;
using Microsoft.Extensions.DependencyInjection;
using ModelContextProtocol.Protocol;
using ModelContextProtocol.Server;
using OpenAI;
using OpenAI.Images;

namespace MCPhappey.Tools.OpenAI.Image;

public static class OpenAIImages
{
    [Description("Create an image with OpenAI image generator")]
    [McpServerTool(Title = "Generate image with OpenAI", Destructive = false)]
    public static async Task<CallToolResult?> OpenAIImages_CreateImage(
     [Description("The image prompt.")] string prompt,
     [Description("New image file name, without extension. Defaults to autogenerated filename.")] string? filename,
     IServiceProvider serviceProvider,
     RequestContext<CallToolRequestParams> requestContext,
     [Description("Size of the image (auto, 1024x1024, 1536x1024 or 1024x1536). Defaults to auto.")] ImageSize? size = ImageSize.auto,
     [Description("Image quality: auto (default), high, medium or low.")] ImageQuality? quality = ImageQuality.auto,
     [Description("Background setting: auto (default), transparent, or opaque.")] ImageBackground? background = ImageBackground.auto,
     [Description("Content moderation level: auto (default) or low.")] ImageModerationLevel? moderation = ImageModerationLevel.auto,
     CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(prompt);
        var openAiClient = serviceProvider.GetRequiredService<OpenAIClient>();

        var imageInput = new OpenAINewImage
        {
            Prompt = prompt,
            Filename = filename ?? requestContext.ToOutputFileName("png"),
            Size = size ?? ImageSize.square,
            Quality = quality ?? ImageQuality.auto,
            Background = background ?? ImageBackground.auto,
            Moderation = moderation ?? ImageModerationLevel.auto
        };

        var (typed, notAccepted, result) = await requestContext.Server.TryElicit(imageInput, cancellationToken);
        if (notAccepted != null) return notAccepted;
        if (typed == null) return "Error".ToErrorCallToolResponse();

        var sizeValue = typed.Size switch
        {
            ImageSize.square => GeneratedImageSize.W1024xH1024,
            ImageSize.landscape => new GeneratedImageSize(1536, 1024),
            ImageSize.portrait => new GeneratedImageSize(1024, 1536),
            _ => GeneratedImageSize.W1024xH1024
        };
        var resultImage = await openAiClient
            .GetImageClient("gpt-image-1")
            .GenerateImageAsync(typed.Prompt, new()
            {
                Quality = new GeneratedImageQuality(typed.Quality?.ToString()?.ToLowerInvariant() ?? "auto"),
                Size = sizeValue,
                Background = typed.Background?.ToString()?.ToLowerInvariant(),
                ModerationLevel = typed.Moderation?.ToString()?.ToLowerInvariant()
            }, cancellationToken);

        var uploaded = await requestContext.Server.Upload(
            serviceProvider,
            $"{typed.Filename}.png",
            resultImage.Value.ImageBytes,
            cancellationToken);

        return uploaded?.ToResourceLinkCallToolResponse();
    }

    [Description("Create an image edit with OpenAI image generator")]
    [McpServerTool(Title = "Generate an image edit with OpenAI", Destructive = false)]
    public static async Task<CallToolResult?> OpenAIImages_CreateImageEdit(
     [Description("The image prompt.")] string prompt,
     [Description("New image file name, without extension. Defaults to autogenerated filename.")] string? filename,
     [Description("File url of the image that should be used for the edit. This tool can also access secured SharePoint and OneDrive links.")] string fileUrl,
     IServiceProvider serviceProvider,
     RequestContext<CallToolRequestParams> requestContext,
     [Description("Size of the image (auto, 1024x1024, 1536x1024 or 1024x1536). Defaults to auto.")] ImageSize? size = ImageSize.auto,
     [Description("Background setting: auto (default), transparent, or opaque.")] ImageBackground? background = ImageBackground.auto,
     [Description("Image quality: auto (default), high, medium or low.")] ImageQuality? quality = ImageQuality.auto,
     CancellationToken cancellationToken = default)
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(prompt);
        var openAiClient = serviceProvider.GetRequiredService<OpenAIClient>();
        var downloadService = serviceProvider.GetRequiredService<DownloadService>();

        var files = await downloadService.DownloadContentAsync(serviceProvider, requestContext.Server, fileUrl, cancellationToken);
        var image = files.FirstOrDefault();

        var imageInput = new OpenAINewImageEdit
        {
            Prompt = prompt,
            Background = background ?? ImageBackground.auto,
            Quality = quality ?? ImageQuality.auto,
            Filename = filename ?? requestContext.ToOutputFileName("png"),
            Size = size ?? ImageSize.square,
        };

        var (typed, notAccepted, result) = await requestContext.Server.TryElicit(imageInput, cancellationToken);
        if (notAccepted != null) return notAccepted;
        if (typed == null) return "Error".ToErrorCallToolResponse();

        var sizeValue = typed.Size switch
        {
            ImageSize.square => GeneratedImageSize.W1024xH1024,
            ImageSize.landscape => new GeneratedImageSize(1536, 1024),
            ImageSize.portrait => new GeneratedImageSize(1024, 1536),
            _ => GeneratedImageSize.W1024xH1024
        };

        var resultImage = await openAiClient
            .GetImageClient("gpt-image-1")
            .GenerateImageEditAsync(image?.Contents.ToStream(), image?.Filename, typed.Prompt, new()
            {
                Size = sizeValue,
                Background = typed.Background?.ToString()?.ToLowerInvariant(),
                Quality = new GeneratedImageQuality(typed.Quality?.ToString()?.ToLowerInvariant() ?? "auto"),
            }, cancellationToken);

        var uploaded = await requestContext.Server.Upload(
            serviceProvider,
            $"{typed.Filename}.png",
            resultImage.Value.ImageBytes,
            cancellationToken);

        return uploaded?.ToResourceLinkCallToolResponse();
    }

    public enum ImageBackground
    {
        [EnumMember(Value = "auto")]
        auto,         // default

        [EnumMember(Value = "transparent")]
        transparent,  // requires png or webp

        [EnumMember(Value = "opaque")]
        opaque
    }

    public enum ImageModerationLevel
    {
        [EnumMember(Value = "auto")]
        auto,  // default

        [EnumMember(Value = "low")]
        low    // less restrictive filtering
    }

    public enum ImageQuality
    {
        [EnumMember(Value = "auto")]
        auto,   // default, model decides

        [EnumMember(Value = "high")]
        high,

        [EnumMember(Value = "medium")]
        medium,

        [EnumMember(Value = "low")]
        low
    }

    public enum ImageSize
    {
        [EnumMember(Value = "auto")]
        auto,             // default, model decides

        [EnumMember(Value = "1024x1024")]
        square,

        [EnumMember(Value = "1536x1024")]
        landscape,

        [EnumMember(Value = "1024x1536")]
        portrait
    }



    [Description("Please fill in the AI image request details.")]
    public class OpenAINewImage
    {
        [JsonPropertyName("prompt")]
        [Required]
        [Description("The image prompt.")]
        public string Prompt { get; set; } = default!;

        [JsonPropertyName("filename")]
        [Required]
        [Description("The new image file name.")]
        public string Filename { get; set; } = default!;

        [JsonPropertyName("background")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        [Description("The background setting: auto (default), transparent, or opaque.")]
        public ImageBackground? Background { get; set; }

        [JsonPropertyName("moderation")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        [Description("The content moderation level: auto (default) or low.")]
        public ImageModerationLevel? Moderation { get; set; }

        [JsonPropertyName("quality")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        [Description("The image quality: auto (default), high, medium, or low.")]
        public ImageQuality? Quality { get; set; }

        [JsonPropertyName("size")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        [Description("The image size: auto (default), 1024x1024, 1536x1024, or 1024x1536.")]
        public ImageSize? Size { get; set; }
    }


    [Description("Please fill in the AI image request details.")]
    public class OpenAINewImageEdit
    {
        [JsonPropertyName("prompt")]
        [Required]
        [Description("The image prompt.")]
        public string Prompt { get; set; } = default!;

        [JsonPropertyName("filename")]
        [Required]
        [Description("The new image file name.")]
        public string Filename { get; set; } = default!;

        [JsonPropertyName("size")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        [Description("The image size: auto (default), 1024x1024, 1536x1024, or 1024x1536.")]
        public ImageSize? Size { get; set; }

        [JsonPropertyName("background")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        [Description("The background setting: auto (default), transparent, or opaque.")]
        public ImageBackground? Background { get; set; }

        [JsonPropertyName("quality")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        [Description("The image quality: auto (default), high, medium, or low.")]
        public ImageQuality? Quality { get; set; }

    }
}

