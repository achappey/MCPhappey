using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Net.Http.Headers;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Json.More;
using MCPhappey.Common.Extensions;
using MCPhappey.Core.Extensions;
using MCPhappey.Core.Services;
using MCPhappey.Tools.AIML.Images;
using Microsoft.Extensions.DependencyInjection;
using ModelContextProtocol.Protocol;
using ModelContextProtocol.Server;

namespace MCPhappey.Tools.AIML.Audio;

public static class AIMLAudio
{
    private static readonly string BASE_URL = "https://api.aimlapi.com/v1/tts";

    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum AIMLVibeVoicePreset
    {
        [EnumMember(Value = "Alice [EN]")] Alice_EN,
        [EnumMember(Value = "Alice [EN] (Background Music)")] Alice_EN_BGM,
        [EnumMember(Value = "Carter [EN]")] Carter_EN,
        [EnumMember(Value = "Frank [EN]")] Frank_EN,
        [EnumMember(Value = "Maya [EN]")] Maya_EN,
        [EnumMember(Value = "Anchen [ZH] (Background Music)")] Anchen_ZH_BGM,
        [EnumMember(Value = "Bowen [ZH]")] Bowen_ZH,
        [EnumMember(Value = "Xinran [ZH]")] Xinran_ZH
    }

    [Description("Please fill in the AI/ML VibeVoice multi-speaker audio generation details.")]
    public class AIMLVibeVoiceRequest
    {
        [JsonPropertyName("script")]
        [Required]
        [MaxLength(5000)]
        [Description("The script to convert to speech, using 'Speaker X:' prefixes for multiple speakers.")]
        public string Script { get; set; } = default!;

        /*  [JsonPropertyName("speakers")]
          [Required]
          [MinLength(1)]
          [MaxLength(4)]
          [Description("List of speaker presets or audio URLs.")]
          public List<AIMLVibeVoiceSpeaker> Speakers { get; set; } = new();*/

        [JsonPropertyName("seed")]
        [Description("Optional seed for deterministic sampling.")]
        public int? Seed { get; set; }

        [JsonPropertyName("cfg_scale")]
        [Range(0.1, 2.0)]
        [Description("CFG (Classifier Free Guidance) scale, controls adherence to the script.")]
        public double CfgScale { get; set; } = 1.3;

        [JsonPropertyName("filename")]
        [Required]
        [Description("Output filename without extension.")]
        public string Filename { get; set; } = default!;
    }

    public class AIMLVibeVoiceSpeaker
    {
        [JsonPropertyName("preset")]
        [Description("Preset name for the speaker voice.")]
        public AIMLVibeVoicePreset? Preset { get; set; }

        [JsonPropertyName("audio_url")]
        [Description("Optional URL to a custom voice sample (overrides preset).")]
        public string? AudioUrl { get; set; }
    }

    [Description("Generate multi-speaker audio using Microsoft VibeVoice-7B model.")]
    [McpServerTool(Title = "Generate multi-speaker audio with AI/ML VibeVoice-7B",
        Name = "aiml_audio_vibevoice7b_create", Destructive = false)]
    public static async Task<CallToolResult?> AIMLAudio_VibeVoice7BCreate(
        [Description("Input script containing dialogue (e.g., 'Speaker 1: ...')"), MaxLength(5000)] string script,
        IServiceProvider serviceProvider,
        RequestContext<CallToolRequestParams> requestContext,
        [Description("Speaker 1 preset.")] AIMLVibeVoicePreset speaker1 = AIMLVibeVoicePreset.Frank_EN,
        [Description("Speaker 2 preset.")] AIMLVibeVoicePreset speaker2 = AIMLVibeVoicePreset.Alice_EN,
        [Description("Optional random seed for deterministic result.")] int? seed = null,
        [Description("Classifier Free Guidance scale (0.1â€“2.0). Default: 1.3.")] double cfgScale = 1.3,
        [Description("Output filename without extension. Defaults to autogenerated name.")] string? filename = null,
        CancellationToken cancellationToken = default)
        => await requestContext.WithExceptionCheck(async () =>
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(script);

        var settings = serviceProvider.GetRequiredService<AIMLSettings>();
        var clientFactory = serviceProvider.GetRequiredService<IHttpClientFactory>();
        var downloadService = serviceProvider.GetRequiredService<DownloadService>();

        // Step 1: Ask user to confirm or fill missing params
        var (typed, notAccepted, _) = await requestContext.Server.TryElicit(
            new AIMLVibeVoiceRequest
            {
                Script = script,
                Seed = seed,
                CfgScale = cfgScale,
                Filename = filename?.ToOutputFileName() ?? requestContext.ToOutputFileName("wav")
            },
            cancellationToken);

        if (notAccepted != null) return notAccepted;
        if (typed == null) return "User input missing.".ToErrorCallToolResponse();

        // Step 2: Build request payload
        var payload = new
        {
            model = "microsoft/vibevoice-7b",
            script = typed.Script,
            speakers = new List<AIMLVibeVoiceSpeaker>() { new() { Preset = speaker1 }, new() { Preset = speaker2 } },
            seed = typed.Seed,
            cfg_scale = typed.CfgScale
        };

        var jsonBody = JsonSerializer.Serialize(payload);

        using var client = clientFactory.CreateClient();
        using var request = new HttpRequestMessage(HttpMethod.Post, BASE_URL);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", settings.ApiKey);
        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        request.Content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Step 3: Send API request
        using var resp = await client.SendAsync(request, cancellationToken);
        var jsonResponse = await resp.Content.ReadAsStringAsync(cancellationToken);
        if (!resp.IsSuccessStatusCode)
            throw new Exception($"{resp.StatusCode}: {jsonResponse}");

        using var doc = JsonDocument.Parse(jsonResponse);
        var audioUrl = doc.RootElement.GetProperty("audio").GetProperty("url").GetString();
        if (string.IsNullOrWhiteSpace(audioUrl))
            throw new Exception("No audio URL returned from VibeVoice API.");

        // Step 4: Download audio
        var filesData = await downloadService.DownloadContentAsync(serviceProvider, requestContext.Server, audioUrl!, cancellationToken);
        var fileData = filesData.FirstOrDefault() ?? throw new Exception("Audio download failed.");

        // Step 5: Upload audio to MCP storage
        var uploaded = await requestContext.Server.Upload(
            serviceProvider,
            $"{typed.Filename}.wav",
            fileData.Contents,
            cancellationToken);

        if (uploaded == null)
            throw new Exception("Upload failed.");

        // Step 6: Return result
        return new CallToolResult()
        {
            Content =
            [
                uploaded,
                new AudioContentBlock()
                {
                    Data = Convert.ToBase64String(fileData.Contents),
                    MimeType = "audio/wav"
                },
                new EmbeddedResourceBlock()
                {
                    Resource = new TextResourceContents()
                    {
                        MimeType = "application/json",
                        Text = doc.RootElement.ToJsonString(),
                        Uri = BASE_URL
                    }
                }
            ]
        };
    });

    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum OpenAITtsVoice
    {
        [EnumMember(Value = "alloy")] Alloy,
        [EnumMember(Value = "ash")] Ash,
        [EnumMember(Value = "ballad")] Ballad,
        [EnumMember(Value = "coral")] Coral,
        [EnumMember(Value = "echo")] Echo,
        [EnumMember(Value = "fable")] Fable,
        [EnumMember(Value = "nova")] Nova,
        [EnumMember(Value = "onyx")] Onyx,
        [EnumMember(Value = "sage")] Sage,
        [EnumMember(Value = "shimmer")] Shimmer,
        [EnumMember(Value = "verse")] Verse
    }

    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum OpenAITtsResponseFormat
    {
        [EnumMember(Value = "mp3")] Mp3,
        [EnumMember(Value = "opus")] Opus,
        [EnumMember(Value = "aac")] Aac,
        [EnumMember(Value = "flac")] Flac,
        [EnumMember(Value = "wav")] Wav,
        [EnumMember(Value = "pcm")] Pcm
    }

    [Description("Please fill in the AI/ML OpenAI TTS-1-HD speech request details.")]
    public class AIMLOpenAITts1HdRequest
    {
        [JsonPropertyName("text")]
        [Required, MaxLength(4096)]
        [Description("The text content to convert to speech.")]
        public string Text { get; set; } = default!;

        [JsonPropertyName("voice")]
        [Required]
        [Description("Voice preset to use.")]
        public OpenAITtsVoice Voice { get; set; } = OpenAITtsVoice.Coral;

        [JsonPropertyName("style")]
        [Description("Voice style intensity. 0 = neutral.")]
        public string? Style { get; set; }

        [JsonPropertyName("response_format")]
        [Description("Audio output format (mp3, wav, opus, etc.).")]
        public OpenAITtsResponseFormat ResponseFormat { get; set; } = OpenAITtsResponseFormat.Mp3;

        [JsonPropertyName("speed")]
        [Range(0.25, 4)]
        [Description("Speech playback speed multiplier. 1.0 = normal.")]
        public double Speed { get; set; } = 1.0;

        [JsonPropertyName("filename")]
        [Required]
        [Description("Output filename without extension.")]
        public string Filename { get; set; } = default!;
    }

    [Description("Generate speech using AI/ML OpenAI TTS-1-HD model.")]
    [McpServerTool(
        Title = "Generate speech with OpenAI TTS-1-HD",
        Name = "aiml_audio_openai_tts1hd_create",
        Destructive = false)]
    public static async Task<CallToolResult?> AIMLAudio_OpenAITts1HdCreate(
        [Description("Text to convert to speech.")][MaxLength(4096)] string text,
        IServiceProvider serviceProvider,
        RequestContext<CallToolRequestParams> requestContext,
        [Description("Voice preset. Default: coral.")] OpenAITtsVoice voice = OpenAITtsVoice.Coral,
        [Description("Voice style (optional).")] string? style = null,
        [Description("Output format. Default: mp3.")] OpenAITtsResponseFormat responseFormat = OpenAITtsResponseFormat.Mp3,
        [Description("Speech speed (0.25â€“4.0). Default: 1.0.")] double speed = 1.0,
        [Description("Output filename without extension. Defaults to autogenerated name.")] string? filename = null,
        CancellationToken cancellationToken = default)
        => await requestContext.WithExceptionCheck(async () =>
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(text);

        var settings = serviceProvider.GetRequiredService<AIMLSettings>();
        var clientFactory = serviceProvider.GetRequiredService<IHttpClientFactory>();
        var downloadService = serviceProvider.GetRequiredService<DownloadService>();

        // Step 1: Ask user for missing fields if needed
        var (typed, notAccepted, _) = await requestContext.Server.TryElicit(
            new AIMLOpenAITts1HdRequest
            {
                Text = text,
                Voice = voice,
                Style = style,
                ResponseFormat = responseFormat,
                Speed = speed,
                Filename = filename?.ToOutputFileName() ?? requestContext.ToOutputFileName(responseFormat.ToString().ToLowerInvariant())
            },
            cancellationToken);

        if (notAccepted != null) return notAccepted;
        if (typed == null) return "User input missing.".ToErrorCallToolResponse();

        // Step 2: Build JSON payload
        var jsonBody = JsonSerializer.Serialize(new
        {
            model = "openai/tts-1-hd",
            text = typed.Text,
            voice = typed.Voice.GetEnumMemberValue(),
            style = typed.Style,
            response_format = typed.ResponseFormat.GetEnumMemberValue(),
            speed = typed.Speed
        });

        using var client = clientFactory.CreateClient();
        using var request = new HttpRequestMessage(HttpMethod.Post, BASE_URL);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", settings.ApiKey);
        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        request.Content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

        // Step 3: Send request
        using var resp = await client.SendAsync(request, cancellationToken);
        var jsonResponse = await resp.Content.ReadAsStringAsync(cancellationToken);
        if (!resp.IsSuccessStatusCode)
            throw new Exception($"{resp.StatusCode}: {jsonResponse}");

        using var doc = JsonDocument.Parse(jsonResponse);
        var audioUrl = doc.RootElement.GetProperty("audio").GetProperty("url").GetString();
        if (string.IsNullOrWhiteSpace(audioUrl))
            throw new Exception("No audio URL returned from AIML API.");

        // Step 4: Download the audio
        var filesData = await downloadService.DownloadContentAsync(serviceProvider, requestContext.Server, audioUrl!, cancellationToken);
        var fileData = filesData.FirstOrDefault() ?? throw new Exception("Audio download failed.");

        // Step 5: Upload to MCP storage
        var uploaded = await requestContext.Server.Upload(
            serviceProvider,
            $"{typed.Filename}.{typed.ResponseFormat.ToString().ToLowerInvariant()}",
            fileData.Contents,
            cancellationToken);

        if (uploaded == null)
            throw new Exception("Upload failed.");

        // Step 6: Return as CallToolResult
        return new CallToolResult()
        {
            Content =
            [
                uploaded,
                new AudioContentBlock()
                {
                    Data = Convert.ToBase64String(fileData.Contents),
                    MimeType = "audio/" + typed.ResponseFormat.ToString().ToLowerInvariant()
                },
                new EmbeddedResourceBlock()
                {
                    Resource = new TextResourceContents()
                    {
                        MimeType = "application/json",
                        Text = doc.RootElement.ToJsonString(),
                        Uri = BASE_URL
                    }
                }
            ]
        };
    });


}
