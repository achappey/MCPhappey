// <auto-generated />
using System;
using MCPhappey.Telemetry.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MCPhappey.Telemetry.Migrations
{
    [DbContext(typeof(MCPhappeyyTelemetryDatabaseContext))]
    [Migration("20250927113731_OutputSize")]
    partial class OutputSize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MCPHappey.Telemetry.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientName")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.ClientVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientVersions");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OutputSize")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("Request");

                    b.HasDiscriminator().HasValue("Request");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.PromptRequest", b =>
                {
                    b.HasBaseType("MCPHappey.Telemetry.Models.Request");

                    b.HasDiscriminator().HasValue("PromptRequest");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.ResourceRequest", b =>
                {
                    b.HasBaseType("MCPHappey.Telemetry.Models.Request");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ResourceRequest");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.ToolRequest", b =>
                {
                    b.HasBaseType("MCPHappey.Telemetry.Models.Request");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ToolRequest");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.ClientVersion", b =>
                {
                    b.HasOne("MCPHappey.Telemetry.Models.Client", "Client")
                        .WithMany("Versions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.Request", b =>
                {
                    b.HasOne("MCPHappey.Telemetry.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MCPHappey.Telemetry.Models.Server", "Server")
                        .WithMany("Requests")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MCPHappey.Telemetry.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.Client", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.Server", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("MCPHappey.Telemetry.Models.User", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
